
// Icons for map
var lrgIcon = L.icon({
  iconUrl: '<%= image_path "map-icon-hot.png" %>',
  iconSize: [40,53]
});

var medIcon = L.icon({
  iconUrl: '<%= image_path "map-icon-warm.png" %>',
  iconSize: [30,39.75]
});

var smlIcon = L.icon({
  iconUrl: '<%= image_path "map-icon-cool.png" %>',
  iconSize: [20,26.5]
});

var ready;
var currentCity = '';

ready = function () {

  // Instantiate map
  var map = L.map('map');


  // Add attribution
  L.tileLayer('http://openmapsurfer.uni-hd.de/tiles/roads/x={x}&y={y}&z={z}', {
    attribution: '<span class="hidden">Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data <a href="http://openstreetmap.org">OpenStreetMap</a> contributors</span><i class="glyphicon glyphicon-question-sign"></i>'}).addTo(map);


  // Add info box layer
  var stationInfoBox = L.control();

  // Add info box for station information
  stationInfoBox.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'station-info'); // create a div with a class "info"
    this.update();
    return this._div;
  };

  // Method that we will use to update the control based on feature properties passed
  stationInfoBox.update = function (props) {
    this._div.innerHTML = '<h4>Station Information</h4>' +  (props ?
      '<p><strong>' + props.name + ' Station</strong><br>' + props.bikes + ' bikes</p><p><strong>Activity</strong><br>' + Number(props.start_trips).toLocaleString('en') + ' pickups<br>' + Number(props.end_trips).toLocaleString('en') + ' dropoffs</p><p><strong>Popular Dropoff Station <i class="glyphicon glyphicon-info-sign" data-toggle="tooltip" data-placement="top" title="Where people usually dropoff bikes they pickup at this station"></i></strong><br>{station.name}</p><p><strong>Popular Pickup Station <i class="glyphicon glyphicon-info-sign" data-toggle="tooltip" data-placement="top" title="Where people usually pickup bikes they dropoff at this station"></i></strong><br>{station.name}</p><p class="text-right small"><br><span class="disclaimer"><em>Data from August 29, 2013 to February 28, 2014</em></span></p>'
      : '<p>Hover over or click a station</p>');
  };


  // Add info box layer
  var citySelectionBox = L.control();

  // Add info box for station information
  citySelectionBox.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'city-selection'); // create a div with a class "info"
    this.update();
    return this._div;
  };

  // Method that we will use to update the control based on feature properties passed
  citySelectionBox.update = function (props) {
    this._div.innerHTML = '&nbsp';
  };


  // Add info window to map
  citySelectionBox.addTo(map);
  
  // Add info window to map
  stationInfoBox.addTo(map);

  // Function for each feature
  function onEachFeature(feature,layer) {
    var mouseout = true;
    layer.on({
      mouseover: function () {
        stationInfoBox.update(layer.feature.properties);
        mouseout = true;
        // Instantiate tooltips
        $('.glyphicon-info-sign').tooltip();
      },
      mouseout: function () {
        if (mouseout === true) {
          stationInfoBox.update();
        }
      },
      click: function () {
        stationInfoBox.update(layer.feature.properties);
        mouseout = false;
        // Instantiate tooltips
        $('.glyphicon-info-sign').tooltip();
      }
    })
  }

  // Map layer for station markers
  var stationsLayer = L.geoJson(null, {
    onEachFeature: onEachFeature
  }).addTo(map);


  // Pull station maps based on city selected
  $("#choose-city li a").click(function(e){
    // Selected City
    city = $(this).data('city');

    // Set values of button to reflect current city
    $(".city-name").text(city);

    // Only get city station data if we don't already have it
    if (currentCity != city) {
      // Get list of stations
      $.ajax({
        dataType: 'text',
        url: '/stations/by_city?city='+city,
        success: function (data) {
          geojson = $.parseJSON(data);

          // Clear stationsLayer and add new data.
          stationsLayer.clearLayers().addData(geojson);

          // Recent map to fit marker bounds
          map.fitBounds(stationsLayer.getBounds());

        }
      });
    }

    // Set currently selected city
    currentCity = city;

    // Ignore link click
    e.preventDefault();
  });

  // Add SF layer
  $('*[data-city="San Francisco"]').click();

}

$(document).ready(ready);
$(document).on('page:load', ready);